#version 450
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct AABB {
	float min_x, min_y, min_z, max_x, max_y, max_z;
};
struct MeshInfo {
	uint index_count, first_index, vertex_offset;
	AABB aabb;
	int base_pos_x, base_pos_y, base_pos_z;
	uint transparent;
};
struct DrawIndexedIndirectCommand {
	uint index_count, instance_count, first_index, vertex_offset, first_instance;
};

layout(std430, set = 0, binding = 0) writeonly buffer uuOpaqueDrawCommand {
	DrawIndexedIndirectCommand uOpaqueDrawCommand[];
};
layout(std430, set = 0, binding = 1) buffer uuOpaqueDrawCount { uint uOpaqueDrawCounts[]; };
layout(std430, set = 0, binding = 2) writeonly buffer uuTransparentDrawCommand {
	DrawIndexedIndirectCommand uTransparentDrawCommand[];
};
layout(std430, set = 0, binding = 3) buffer uuTransparentDrawCount { uint uTransparentDrawCounts[]; };

layout(std430, set = 0, binding = 4) readonly buffer uuMeshInfo { MeshInfo uMeshInfo[]; };

layout(set = 0, binding = 5) uniform uuCamera {
	vec4 uViewPosition;
	mat4 uViewProjection;
};

layout(set = 0, binding = 6) uniform sampler2D uDepthHierarchy;

layout(push_constant) uniform uuPushConstant { uint uMeshCount, uDrawCmdOffset, uCountOffset; };

uint GetCullBits(in const vec4 projected) {
	return (projected.x < -projected.w ? 1u : 0u)    // left
	       | (projected.x > projected.w ? 2u : 0u)   // right
	       | (projected.y < -projected.w ? 4u : 0u)  // bottom
	       | (projected.y > projected.w ? 8u : 0u)   // top
	       | (projected.z < -projected.w ? 16u : 0u) // near
	       | (projected.z > projected.w ? 32u : 0u)  // far
	       | (projected.w <= 0.0 ? 64u : 0u)         // invalid
	       | (projected.w > 0.0 ? 128u : 0u)         // valid
	    ;
}

void GetClipInfo(in const AABB aabb, inout vec3 clip_min, inout vec3 clip_max, inout uint cull_bits) {
	vec3 bmin = vec3(aabb.min_x, aabb.min_y, aabb.min_z) - uViewPosition.xyz,
	     bmax = vec3(aabb.max_x, aabb.max_y, aabb.max_z) - uViewPosition.xyz;

	// Get the bounding of a World space AABB in UV-Depth space
	vec4 projected = uViewProjection * vec4(bmin.x, bmin.y, bmin.z, 1.0);
	vec3 clip = projected.xyz / projected.w;
	clip_min = clip_max = clip;
	cull_bits = GetCullBits(projected);

#define MAINTAIN \
	clip = projected.xyz / projected.w; \
	clip_min = min(clip_min, clip); \
	clip_max = max(clip_max, clip); \
	cull_bits &= GetCullBits(projected);

	projected = uViewProjection * vec4(bmin.x, bmin.y, bmax.z, 1.0);
	MAINTAIN
	projected = uViewProjection * vec4(bmin.x, bmax.y, bmin.z, 1.0);
	MAINTAIN
	projected = uViewProjection * vec4(bmin.x, bmax.y, bmax.z, 1.0);
	MAINTAIN
	projected = uViewProjection * vec4(bmax.x, bmin.y, bmin.z, 1.0);
	MAINTAIN
	projected = uViewProjection * vec4(bmax.x, bmin.y, bmax.z, 1.0);
	MAINTAIN
	projected = uViewProjection * vec4(bmax.x, bmax.y, bmin.z, 1.0);
	MAINTAIN
	projected = uViewProjection * vec4(bmax.x, bmax.y, bmax.z, 1.0);
	MAINTAIN
}

bool FrustumCull(in const uint cull_bits) { return (cull_bits & 127u) != 0; }

bool OcclusionCull(in const vec3 clip_min, in const vec3 clip_max, in const uint cull_bits) {
	if ((cull_bits & 128u) == 0) // if any projected.w <= 0
		return false;
	vec2 uv_min = clip_min.xy * 0.5 + 0.5, uv_max = clip_max.xy * 0.5 + 0.5;
	vec2 uv_size = uv_max.xy - uv_min.xy, tex_size = vec2(textureSize(uDepthHierarchy, 0));
	float lod = ceil(log2(max(uv_size.x, uv_size.y) * max(tex_size.x, tex_size.y)));
	return textureLod(uDepthHierarchy, (uv_min + uv_max) * 0.5, lod).r < clip_min.z;
}

void main() {
	uint mesh_id = gl_GlobalInvocationID.x;
	if (mesh_id >= uMeshCount)
		return;

	uint mesh_info_idx = uDrawCmdOffset | mesh_id;

	vec3 clip_min, clip_max;
	uint cull_bits;
	GetClipInfo(uMeshInfo[mesh_info_idx].aabb, clip_min, clip_max, cull_bits);

	if (FrustumCull(cull_bits) || OcclusionCull(clip_min, clip_max, cull_bits))
		return;

	if (uMeshInfo[mesh_info_idx].transparent == 0) {
		uint opaque_draw_id = atomicAdd(uOpaqueDrawCounts[uCountOffset], 1u);
		uOpaqueDrawCommand[uDrawCmdOffset | opaque_draw_id] =
		    DrawIndexedIndirectCommand(uMeshInfo[mesh_info_idx].index_count, 1, uMeshInfo[mesh_info_idx].first_index,
		                               uMeshInfo[mesh_info_idx].vertex_offset, mesh_id);
	} else {
		uint transparent_draw_id = atomicAdd(uTransparentDrawCounts[uCountOffset], 1u);
		uTransparentDrawCommand[uDrawCmdOffset | transparent_draw_id] =
		    DrawIndexedIndirectCommand(uMeshInfo[mesh_info_idx].index_count, 1, uMeshInfo[mesh_info_idx].first_index,
		                               uMeshInfo[mesh_info_idx].vertex_offset, mesh_id);
	}
}
